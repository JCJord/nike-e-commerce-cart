pipeline {
    agent any

    environment {
        DOCKER_IMAGE_CLIENT = 'angular-client-image'
        DOCKER_IMAGE_TEST = 'angular-test-image'
    }

    stages {
        stage('Build angular app') {
            agent {
                docker {
                    image 'node:16-alpine'
                }
            }
            steps {
                script {
                    sh '''
                        cd nike-cart
                        npm install
                        npm run build
                    '''
                }
            }
        }

        stage('AWS') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    args "--entrypoint=''"
                }
            }
            environment {
                AWS_S3_BUCKET = 'e-commerce-client-525125'
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'my-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        aws --version
                        aws s3 cp nike-cart/dist/nike-cart/ s3://${AWS_S3_BUCKET}/ --recursive
                    '''
                }
            }
        }

        stage('Build Docker Client') {
            steps {
                script {
                    // Build Docker image for the Angular client
                    sh '''
                        docker build -t $DOCKER_IMAGE_CLIENT -f Dockerfile.client .
                    '''
                }
            }
        }

        stage('Build Docker Test') {
            steps {
                script {
                    // Build Docker image for testing
                    sh '''
                        docker build -t $DOCKER_IMAGE_TEST -f Dockerfile.test .
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run tests in the test container
                    sh '''
                        docker run --rm $DOCKER_IMAGE_TEST
                    '''
                }
            }
        }
    }
}
